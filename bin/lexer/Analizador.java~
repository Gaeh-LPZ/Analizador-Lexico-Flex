// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/lexer/Analizador.flex

package lexer;
import java.io.FileWriter;
import java.io.IOException;


@SuppressWarnings("fallthrough")
public class Analizador {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\1\1\5"+
    "\1\6\2\0\1\7\1\10\1\0\1\11\1\12\1\13"+
    "\1\14\1\0\1\15\1\16\1\17\12\20\1\0\1\21"+
    "\1\0\1\22\3\0\22\23\1\24\7\23\1\25\1\26"+
    "\1\27\3\0\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\2\23\1\41\1\42\1\43\1\44"+
    "\1\45\1\23\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\23\1\54\1\23\1\55\1\56\1\57\7\0\1\3"+
    "\u01a2\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\1\1\5\1\1"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\2\20\1\21\1\22\14\20\1\23\1\1"+
    "\1\24\1\0\1\25\1\0\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\0\4\20\1\36\3\20"+
    "\1\37\10\20\1\40\1\41\6\20\1\42\1\43\1\20"+
    "\1\44\11\20\1\45\1\20\1\46\3\20\1\47\4\20"+
    "\1\50\1\51\3\20\1\52\1\53\1\54\2\20\1\55"+
    "\1\56\1\57\1\60";

  private static int [] zzUnpackAction() {
    int [] result = new int[112];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\60\0\140\0\60\0\60\0\220\0\60\0\300"+
    "\0\60\0\60\0\360\0\u0120\0\u0150\0\60\0\u0180\0\u01b0"+
    "\0\60\0\60\0\u01e0\0\u0210\0\60\0\60\0\u0240\0\u0270"+
    "\0\u02a0\0\u02d0\0\u0300\0\u0330\0\u0360\0\u0390\0\u03c0\0\u03f0"+
    "\0\u0420\0\u0450\0\60\0\u0480\0\60\0\220\0\60\0\u04b0"+
    "\0\60\0\60\0\60\0\60\0\60\0\60\0\u04e0\0\60"+
    "\0\u0510\0\u0540\0\u0570\0\u05a0\0\u05d0\0\u01e0\0\u0600\0\u0630"+
    "\0\u0660\0\u01e0\0\u0690\0\u06c0\0\u06f0\0\u0720\0\u0750\0\u0780"+
    "\0\u07b0\0\u07e0\0\60\0\u0510\0\u0810\0\u0840\0\u0870\0\u08a0"+
    "\0\u08d0\0\u0900\0\u01e0\0\u01e0\0\u0930\0\u01e0\0\u0960\0\u0990"+
    "\0\u09c0\0\u09f0\0\u0a20\0\u0a50\0\u0a80\0\u0ab0\0\u0ae0\0\u01e0"+
    "\0\u0b10\0\u01e0\0\u0b40\0\u0b70\0\u0ba0\0\u01e0\0\u0bd0\0\u0c00"+
    "\0\u0c30\0\u0c60\0\u01e0\0\u01e0\0\u0c90\0\u0cc0\0\u0cf0\0\u01e0"+
    "\0\u01e0\0\u01e0\0\u0d20\0\u0d50\0\u01e0\0\u01e0\0\u01e0\0\u01e0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[112];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\0\1\3\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\2\1\26"+
    "\1\23\1\27\1\30\1\31\1\32\1\33\2\23\1\34"+
    "\1\23\1\35\1\23\1\36\1\37\1\23\1\40\2\23"+
    "\1\41\1\42\1\23\1\43\1\44\1\45\61\0\1\3"+
    "\2\0\1\3\53\0\6\46\1\47\17\46\1\50\31\46"+
    "\10\0\1\51\71\0\1\52\51\0\1\53\5\0\1\54"+
    "\52\0\1\55\4\0\1\56\54\0\1\57\2\0\1\60"+
    "\53\0\1\61\1\0\1\20\57\0\1\23\2\0\2\23"+
    "\3\0\25\23\23\0\1\23\2\0\2\23\3\0\20\23"+
    "\1\62\3\23\1\63\23\0\1\23\2\0\2\23\3\0"+
    "\14\23\1\64\10\23\23\0\1\23\2\0\2\23\3\0"+
    "\11\23\1\65\13\23\23\0\1\23\2\0\2\23\3\0"+
    "\14\23\1\66\10\23\23\0\1\23\2\0\2\23\3\0"+
    "\11\23\1\67\13\23\23\0\1\23\2\0\2\23\3\0"+
    "\11\23\1\70\2\23\1\71\10\23\23\0\1\23\2\0"+
    "\2\23\3\0\5\23\1\72\5\23\1\73\11\23\23\0"+
    "\1\23\2\0\2\23\3\0\1\74\24\23\23\0\1\23"+
    "\2\0\2\23\3\0\21\23\1\75\3\23\23\0\1\23"+
    "\2\0\2\23\3\0\16\23\1\76\2\23\1\77\3\23"+
    "\23\0\1\23\2\0\2\23\3\0\20\23\1\100\4\23"+
    "\23\0\1\23\2\0\2\23\3\0\14\23\1\101\10\23"+
    "\23\0\1\23\2\0\2\23\3\0\7\23\1\102\15\23"+
    "\61\0\1\103\1\0\2\46\3\0\53\46\2\57\3\0"+
    "\53\57\20\0\1\104\57\0\1\23\2\0\2\23\3\0"+
    "\16\23\1\105\6\23\23\0\1\23\2\0\2\23\3\0"+
    "\17\23\1\106\5\23\23\0\1\23\2\0\2\23\3\0"+
    "\14\23\1\107\10\23\23\0\1\23\2\0\2\23\3\0"+
    "\1\110\24\23\23\0\1\23\2\0\2\23\3\0\17\23"+
    "\1\111\5\23\23\0\1\23\2\0\2\23\3\0\14\23"+
    "\1\112\10\23\23\0\1\23\2\0\2\23\3\0\16\23"+
    "\1\113\6\23\23\0\1\23\2\0\2\23\3\0\20\23"+
    "\1\114\4\23\23\0\1\23\2\0\2\23\3\0\10\23"+
    "\1\115\14\23\23\0\1\23\2\0\2\23\3\0\20\23"+
    "\1\116\4\23\23\0\1\23\2\0\2\23\3\0\10\23"+
    "\1\117\14\23\23\0\1\23\2\0\2\23\3\0\1\23"+
    "\1\120\23\23\23\0\1\23\2\0\2\23\3\0\1\121"+
    "\24\23\23\0\1\23\2\0\2\23\3\0\10\23\1\122"+
    "\14\23\23\0\1\23\2\0\2\23\3\0\10\23\1\123"+
    "\14\23\23\0\1\23\2\0\2\23\3\0\10\23\1\124"+
    "\14\23\23\0\1\23\2\0\2\23\3\0\20\23\1\125"+
    "\4\23\23\0\1\23\2\0\2\23\3\0\11\23\1\126"+
    "\13\23\23\0\1\23\2\0\2\23\3\0\17\23\1\127"+
    "\5\23\23\0\1\23\2\0\2\23\3\0\4\23\1\130"+
    "\20\23\23\0\1\23\2\0\2\23\3\0\1\131\24\23"+
    "\23\0\1\23\2\0\2\23\3\0\13\23\1\132\11\23"+
    "\23\0\1\23\2\0\2\23\3\0\13\23\1\133\11\23"+
    "\23\0\1\23\2\0\2\23\3\0\11\23\1\134\13\23"+
    "\23\0\1\23\2\0\2\23\3\0\20\23\1\135\4\23"+
    "\23\0\1\23\2\0\2\23\3\0\3\23\1\136\21\23"+
    "\23\0\1\23\2\0\2\23\3\0\11\23\1\137\13\23"+
    "\23\0\1\23\2\0\2\23\3\0\13\23\1\140\11\23"+
    "\23\0\1\23\2\0\2\23\3\0\4\23\1\141\20\23"+
    "\23\0\1\23\2\0\2\23\3\0\4\23\1\142\20\23"+
    "\23\0\1\23\2\0\2\23\3\0\17\23\1\143\5\23"+
    "\23\0\1\23\2\0\2\23\3\0\20\23\1\144\4\23"+
    "\23\0\1\23\2\0\2\23\3\0\20\23\1\145\4\23"+
    "\23\0\1\23\2\0\2\23\3\0\10\23\1\146\14\23"+
    "\23\0\1\23\2\0\2\23\3\0\10\23\1\147\14\23"+
    "\23\0\1\23\2\0\2\23\3\0\4\23\1\150\20\23"+
    "\23\0\1\23\2\0\2\23\3\0\6\23\1\151\16\23"+
    "\23\0\1\23\2\0\2\23\3\0\12\23\1\152\12\23"+
    "\23\0\1\23\2\0\2\23\3\0\1\153\24\23\23\0"+
    "\1\23\2\0\2\23\3\0\11\23\1\154\13\23\23\0"+
    "\1\23\2\0\2\23\3\0\2\23\1\155\22\23\23\0"+
    "\1\23\2\0\2\23\3\0\2\23\1\156\22\23\23\0"+
    "\1\23\2\0\2\23\3\0\13\23\1\157\11\23\23\0"+
    "\1\23\2\0\2\23\3\0\13\23\1\160\11\23\3\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[3456];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\2\11\1\1\1\11\1\1\2\11"+
    "\3\1\1\11\2\1\2\11\2\1\2\11\14\1\1\11"+
    "\1\1\1\11\1\0\1\11\1\0\6\11\1\1\1\11"+
    "\1\0\21\1\1\11\55\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[112];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    public class Tabla{
        String nombre;
        Tabla siguiente;

        public Tabla(String nombre){
            this.nombre = nombre;
            this.siguiente = null;
        }
    }
    
    // Lista enlazada para almacenar símbolos únicos
    private Tabla tablaSimbolos = null;
    
    // Método para verificar si un símbolo ya existe
    private boolean simboloExiste(String simbolo) {
        Tabla actual = tablaSimbolos;
        while (actual != null) {
            if (actual.nombre.equals(simbolo)) {
                return true;
            }
            actual = actual.siguiente;
        }
        return false;
    }
    
    // Método para agregar un símbolo a la lista si no existe
    private void agregarSimbolo(String simbolo) {
        if (!simboloExiste(simbolo)) {
            Tabla nuevoSimbolo = new Tabla(simbolo);
            nuevoSimbolo.siguiente = tablaSimbolos;
            tablaSimbolos = nuevoSimbolo;
        }
    }

    private void escribirTiraTokens(String token, String lexema){
        try{
            FileWriter archivo = new FileWriter("tablaTokens.txt", true);
            archivo.write(String.format("%-15s %-20s Linea: %-5d Columna: %-5d\n", token, lexema, yyline + 1, yycolumn + 1));
            archivo.close();
        } catch (IOException e) {
            System.err.println("Error al escribir en la tabla de tokens: " + e.getMessage());
        }
    }

    private void escribirSimbolos(String simbolo){
        // Solo agregar a la lista si es nuevo
        agregarSimbolo(simbolo);
    }
    
    // Método para escribir todos los símbolos únicos al archivo
    public void escribirTablaSimbolos() {
        try {
            FileWriter archivo = new FileWriter("tablaSimbolos.txt", true);
            
            Tabla actual = tablaSimbolos;
            while (actual != null) {
                archivo.write(String.format("%-20s\n", actual.nombre));
                actual = actual.siguiente;
            }
            
            archivo.close();
        } catch (IOException e) {
            System.err.println("Error al escribir la tabla de símbolos: " + e.getMessage());
        }
    }

    private void escribirError(String lexema){
        try {
            FileWriter archivo = new FileWriter("tablaErrores.txt", true);
            archivo.write(String.format("Error Lexico: '%s' en linea %d, columna %d\n", lexema, yyline + 1, yycolumn + 1));
            archivo.close();
        } catch (IOException e) {
            System.err.println("Error al escribir en la tabla de errores: " + e.getMessage());
        }
    }

    public void limpiarArchivos() {
        try {
            // Limpiar tabla de tokens
            FileWriter archivo1 = new FileWriter("tablaTokens.txt", false);
            archivo1.write("=== TABLA DE TOKENS ===\n");
            archivo1.write(String.format("%-15s %-20s %-20s\n", "TOKEN", "LEXEMA", "POSICION"));
            archivo1.write("==================================================\n");
            archivo1.close();
            
            // Limpiar tabla de símbolos
            FileWriter archivo2 = new FileWriter("tablaSimbolos.txt", false);
            archivo2.write("=== TABLA DE SIMBOLOS ===\n");
            archivo2.write(String.format("%-20s\n", "SIMBOLO"));
            archivo2.write("====================\n");
            archivo2.close();
            
            // Limpiar tabla de errores
            FileWriter archivo3 = new FileWriter("tablaErrores.txt", false);
            archivo3.write("=== TABLA DE ERRORES ===\n");
            archivo3.close();
            
            // Limpiar la lista de símbolos en memoria
            tablaSimbolos = null;
            
        } catch (IOException e) {
            System.err.println("Error al limpiar archivos: " + e.getMessage());
        }
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Analizador(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public void yylex() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
          {     return;
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { escribirError(yytext());
            }
          // fall through
          case 49: break;
          case 2:
            { /* No retornamos ninguna cadena */
            }
          // fall through
          case 50: break;
          case 3:
            { /* Ignoramos las lineas nuevas */
            }
          // fall through
          case 51: break;
          case 4:
            { escribirTiraTokens("NOT", yytext());
            }
          // fall through
          case 52: break;
          case 5:
            { escribirTiraTokens("MODULO", yytext());
            }
          // fall through
          case 53: break;
          case 6:
            { escribirTiraTokens("PARENTESIS_IZQ", yytext());
            }
          // fall through
          case 54: break;
          case 7:
            { escribirTiraTokens("PARENTESIS_DER", yytext());
            }
          // fall through
          case 55: break;
          case 8:
            { escribirTiraTokens("MULTIPLICACION", yytext());
            }
          // fall through
          case 56: break;
          case 9:
            { escribirTiraTokens("SUMA", yytext());
            }
          // fall through
          case 57: break;
          case 10:
            { escribirTiraTokens("RESTA", yytext());
            }
          // fall through
          case 58: break;
          case 11:
            { escribirTiraTokens("PUNTO", yytext());
            }
          // fall through
          case 59: break;
          case 12:
            { escribirTiraTokens("DIVISION", yytext());
            }
          // fall through
          case 60: break;
          case 13:
            { escribirTiraTokens("NUMERO_ENTERO", yytext());
            }
          // fall through
          case 61: break;
          case 14:
            { escribirTiraTokens("PUNTO_COMA", yytext());
            }
          // fall through
          case 62: break;
          case 15:
            { escribirTiraTokens("ASIGNACION", yytext());
            }
          // fall through
          case 63: break;
          case 16:
            { escribirTiraTokens("IDENTIFICADOR", yytext());
    escribirSimbolos(yytext());
            }
          // fall through
          case 64: break;
          case 17:
            { escribirTiraTokens("CORCHETE_IZQ", yytext());
            }
          // fall through
          case 65: break;
          case 18:
            { escribirTiraTokens("CORCHETE_DER", yytext());
            }
          // fall through
          case 66: break;
          case 19:
            { escribirTiraTokens("LLAVE_IZQ", yytext());
            }
          // fall through
          case 67: break;
          case 20:
            { escribirTiraTokens("LLAVE_DER", yytext());
            }
          // fall through
          case 68: break;
          case 21:
            { escribirTiraTokens("LITERAL", yytext());
            }
          // fall through
          case 69: break;
          case 22:
            { escribirTiraTokens("AND", yytext());
            }
          // fall through
          case 70: break;
          case 23:
            { escribirTiraTokens("ASIG_MULT", yytext());
            }
          // fall through
          case 71: break;
          case 24:
            { escribirTiraTokens("INCREMENTO", yytext());
            }
          // fall through
          case 72: break;
          case 25:
            { escribirTiraTokens("ASIG_SUMA", yytext());
            }
          // fall through
          case 73: break;
          case 26:
            { escribirTiraTokens("DECREMENTO", yytext());
            }
          // fall through
          case 74: break;
          case 27:
            { escribirTiraTokens("ASIG_RESTA", yytext());
            }
          // fall through
          case 75: break;
          case 28:
            { /* Ignoramos los comentarios */
            }
          // fall through
          case 76: break;
          case 29:
            { escribirTiraTokens("ASIG_DIV", yytext());
            }
          // fall through
          case 77: break;
          case 30:
            { escribirTiraTokens("DO", yytext());
            }
          // fall through
          case 78: break;
          case 31:
            { escribirTiraTokens("IF", yytext());
            }
          // fall through
          case 79: break;
          case 32:
            { escribirTiraTokens("OR", yytext());
            }
          // fall through
          case 80: break;
          case 33:
            { escribirTiraTokens("NUMERO_FLOTANTE", yytext());
            }
          // fall through
          case 81: break;
          case 34:
            { escribirTiraTokens("FOR", yytext());
            }
          // fall through
          case 82: break;
          case 35:
            { escribirTiraTokens("INT", yytext());
            }
          // fall through
          case 83: break;
          case 36:
            { escribirTiraTokens("OUT", yytext());
            }
          // fall through
          case 84: break;
          case 37:
            { escribirTiraTokens("ELSE", yytext());
            }
          // fall through
          case 85: break;
          case 38:
            { escribirTiraTokens("MAIN", yytext());
            }
          // fall through
          case 86: break;
          case 39:
            { escribirTiraTokens("VOID", yytext());
            }
          // fall through
          case 87: break;
          case 40:
            { escribirTiraTokens("CLASS", yytext());
            }
          // fall through
          case 88: break;
          case 41:
            { escribirTiraTokens("FLOAT", yytext());
            }
          // fall through
          case 89: break;
          case 42:
            { escribirTiraTokens("WHILE", yytext());
            }
          // fall through
          case 90: break;
          case 43:
            { escribirTiraTokens("STRING", yytext());
            }
          // fall through
          case 91: break;
          case 44:
            { escribirTiraTokens("SYSTEM", yytext());
            }
          // fall through
          case 92: break;
          case 45:
            { escribirTiraTokens("PUBLIC", yytext());
            }
          // fall through
          case 93: break;
          case 46:
            { escribirTiraTokens("STATIC", yytext());
            }
          // fall through
          case 94: break;
          case 47:
            { escribirTiraTokens("BOOLEAN", yytext());
            }
          // fall through
          case 95: break;
          case 48:
            { escribirTiraTokens("PRINTLN", yytext());
            }
          // fall through
          case 96: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
